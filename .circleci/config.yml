version: 2.1
parameters:
  java-tag:
    type: string
    default: "21.0.2"
  postgres-tag:
    type: string
    default: "16.4"
orbs:
  aws-s3: circleci/aws-s3@3.0.0
executors:
  integration_test_exec:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
        environment:
          JAVA_TOOL_OPTIONS: -Xmx1024m # Nothing to do with surefire plugin, it has its own JVM. The two of these plus ES (1.3 GB) must add up to a bit less than 6GB.
          PGHOST: 127.0.0.1
      - image: cimg/postgres:<< pipeline.parameters.postgres-tag >>
        command: postgres -c max_connections=200 -c jit=off
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          PG_HOST: localhost
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PASSWORD: postgres
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
        environment:
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node
    resource_class: medium+
  machine_integration_test_exec:
    machine: # run the steps with Ubuntu VM
      image: ubuntu-2204:2024.04.4
    environment:
      PGHOST: 127.0.0.1
    resource_class: medium

common_filters: &common_filters
  filters:
    tags:
      only: /.*/
    branches:
      ignore:
        - gh-pages


workflows:
  version: 2
  everything:
    jobs:
      - build:
          <<: *common_filters
      - full_build_check:
          <<: *common_filters
          requires:
            - build
      - unit_test:
          <<: *common_filters
          requires:
            - build
      - workflow-integration-tests:
          <<: *common_filters
          requires:
            - full_build_check
          context: sonarcloud
      - bitbucket-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - language-parsing-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - localstack-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - hoverfly-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - tool-integration-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - integration-tests:
          <<: *common_filters
          requires:
            - full_build_check
      - regression-integration-tests:
          filters:
            branches:
              only:
                - master
                - /^release.*$/
          requires:
            - full_build_check
      - sonar-cloud:
          <<: *common_filters
          requires:
            - unit_test
            - workflow-integration-tests
            - bitbucket-tests
            - language-parsing-tests
            - localstack-tests
            - hoverfly-tests
            - tool-integration-tests
            - integration-tests
            - regression-integration-tests
          context: sonarcloud

jobs:
  full_build_check:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
    steps:
      - checkout
      - run:
          name: evaluate [skipTests] condition
          command: |
            export COMMIT_MESSAGE="$(git log --format=oneline -n 1 $CIRCLE_SHA1)"
            echo "Commit message: $COMMIT_MESSAGE"
            if [[ $CIRCLE_BRANCH == "develop" ]]; then
              echo "On develop branch: ignoring [skipTests] check to ensure the full build is run."
              exit 0
            fi
            if [[ $COMMIT_MESSAGE =~ ^.*\[skipTests\].*$ ]]; then
              echo "Found [skipTests]: failing this check to skip subsequent CircleCI tests."
              exit 1
            else
              echo "Did not find [skipTests]: continue running subsequent CircleCI tests."
            fi
  regression-integration-tests:
    executor: machine_integration_test_exec
    environment:
      TESTING_PROFILE: regression-integration-tests
      DOCKSTORE_DOCKER_DB: true
    steps:
      - setup_machine
      - setup_test
      - setup_postgres_docker
      - install-pip
      - run:
          name: install pip dependencies
          command: scripts/install-tests.sh
      - setup_integration_test
      - save_test_results
  integration-tests:
    parallelism: 4
    executor: integration_test_exec
    environment:
      TESTING_PROFILE: integration-tests
    steps:
      - setup_remote_docker:
          version: docker24
      - setup_test
      - install-postgres
      - setup_postgres
      - setup_integration_test
      - save_test_results
  tool-integration-tests:
    parallelism: 2
    executor: integration_test_exec
    environment:
      TESTING_PROFILE: tool-integration-tests
    steps:
      - setup_test
      - install-postgres
      - setup_postgres
      - setup_integration_test
      - save_test_results
  workflow-integration-tests:
    parallelism: 3
    executor: integration_test_exec
    environment:
      TESTING_PROFILE: workflow-integration-tests
    steps:
      - setup_test
      - install-postgres
      - setup_postgres
      - setup_integration_test
      - save_test_results
  bitbucket-tests:
    executor: integration_test_exec
    environment:
      TESTING_PROFILE: bitbucket-tests
    steps:
      - setup_test
      - install-postgres
      - setup_postgres
      - setup_integration_test
      - save_test_results
  language-parsing-tests:
    executor: machine_integration_test_exec
    environment:
      TESTING_PROFILE: language-parsing-tests
      DOCKSTORE_DOCKER_DB: true
    steps:
      - setup_machine
      - install-pip-machine
      - run:
          name: install pip dependencies
          command: scripts/install-tests.sh
      - run:
          name: build sam-cli
          command: |
            pip3 install aws-sam-cli==1.121.0
            sudo apt install unzip
            wget -O wdl-parsing.zip https://github.com/dockstore/lambda/releases/download/0.2.2-SNAPSHOT/wdl-parsing.zip
            unzip wdl-parsing.zip
            cd wdl-parsing
            # docker pull amazon/aws-sam-cli-build-image-java11
            # cannot seem to `sam build --use-container` using local jdk and mvn instead
            sam build --use-container --debug
      - run:
          name: run sam-cli
          command: |
            cd wdl-parsing
            sam local start-api
          background: true
      - setup_test
      - setup_postgres_docker
      - run:
          name: Wait for lambda
          command: wget --output-document /dev/null --waitretry=5 --tries=10 --retry-connrefused localhost:3000 || true
      - setup_integration_test
      - save_test_results
  localstack-tests:
    executor: machine_integration_test_exec
    environment:
      TESTING_PROFILE: localstack-tests
      DOCKSTORE_DOCKER_DB: true
    steps:
      - setup_machine
      - setup_test
      - setup_postgres_docker
      - setup_integration_test
      - save_test_results
  hoverfly-tests:
    executor: integration_test_exec
    environment:
      TESTING_PROFILE: hoverfly-tests
      DOCKSTORE_DOCKER_DB: true
    steps:
      - setup_test
      - install-postgres
      - setup_postgres
      - setup_integration_test:
          use_hoverfly_cert: true
      - save_test_results
  build:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-m2-{{ checksum "THIRD-PARTY-LICENSES.txt" }}-{{ checksum "THIRD-PARTY-LICENSES.dev.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-m2-
      - install-git-secrets
      - run:
          name: decrypt and expand confidential test data
          command: |
            sudo apt install openssl -y
            bash scripts/decrypt.sh
      - run:
          name: Generate test lists
          command: bash scripts/generate-test-lists.sh
      - run:
          name: Verify that the MacOS installation instructions in README.md and macos_installation_instructions.yml are up to date with scripts/macos-instructions.sh
          command: scripts/check_macos.sh
      - store_artifacts:
          path: temp/test-lists
      - run:
          name: build
          command: ./mvnw -B clean install -DskipTests
      - run:
          name: validate openapi
          command: |
            wget --no-verbose https://repo.maven.apache.org/maven2/org/openapitools/openapi-generator-cli/4.3.0/openapi-generator-cli-4.3.0.jar -O openapi-generator-cli.jar
            # skip swagger validation because of difficult-to-fix operationId duplications
            # java -jar openapi-generator-cli.jar validate -i dockstore-webservice/src/main/resources/swagger.yaml
            java -jar openapi-generator-cli.jar validate -i dockstore-webservice/src/main/resources/openapi3/openapi.yaml
      - run:
          name: Check Java imports sorted and OpenAPI
          # A dirty Java file after a build probably means it was committed without building, and its imports are out of order
          command: |
            if [[ $(git diff --name-only | grep "\.java$") != '' ]]; then
              echo "At least one Java file didn't have its imports sorted"
              git diff --stat | grep "\.java$"
              exit 1
            fi
            # SEAB-6379, openapi check will fail on build of a tag
            if [[ -z "${CIRCLE_TAG}" ]]; then
              echo "Checking openapi.yaml"
              if [[ $(git diff --name-only | grep "openapi.yaml") != '' ]]; then
                echo "openapi.yaml is out of sync"
                git diff --stat | grep "openapi.yaml"
                exit 1
              fi
            fi

      - persist_to_workspace:
          root: .
          paths:
            - .
      - run:
          name: check generated flattened POMs match checked-in files.
          command: |
            # need better solution, but leaving this as-is fouls up the release since the Maven release plugin doesn't know about the flattened poms
            if [[ -z "${CIRCLE_TAG}" ]]; then
              scripts/check_poms.sh
            fi
          environment:
            TESTING_PROFILE: automated-review

  unit_test: # runs not using Workflows must have a `build` job as entry point
    parameters:
      aws_bucket:
        type: string
        default: "${AWS_BUCKET}"
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
        environment:
          PGHOST: 127.0.0.1
      - image: cimg/postgres:<< pipeline.parameters.postgres-tag >>
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PASSWORD: postgres
    parallelism: 2
    steps: # a collection of executable commands
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-m2-{{ checksum "THIRD-PARTY-LICENSES.txt" }}-{{ checksum "THIRD-PARTY-LICENSES.dev.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-m2-
      - checkout
      - install-postgres
      - install-git-secrets
      - setup_postgres
      - run: # Useful for verifying versions
          name: Java/Maven/Python versions
          command: |
            java -version
            ./mvnw -v
            python3 -V
      - run:
          name: split up tests and create a file for cache checksum
          command: |
            touch /tmp/tests-to-run.txt
            if [ $CIRCLE_NODE_TOTAL != 1 ]
            then
              cat temp/test-lists/unit/all.txt | circleci tests run --command="> /tmp/tests-to-run.txt xargs echo" --verbose --split-by=timings --time-default=0.1s
            else
              cat temp/test-lists/unit/all.txt | circleci tests run --command="> /tmp/tests-to-run.txt xargs echo" --verbose
            fi
      - restore_cache:
          keys:
            - dockstore-web-cache-unit-test-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
            - dockstore-web-cache-unit-test-{{ checksum "/tmp/tests-to-run.txt" }}-
            - dockstore-web-cache-unit-test-
            - dockstore-web-cache-
      - run:
          name: run the actual tests
          command: |
            if [ $CIRCLE_NODE_TOTAL != 1 ] 
            then
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -Punit-tests,coverage -ntp \
              -Dtest=`cat /tmp/tests-to-run.txt | tr ' ' ','` -Dsurefire.failIfNoSpecifiedTests=false | grep  -v "^Running Changeset:"
            else 
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -Dsurefire.failIfNoSpecifiedTests=false -Punit-tests,coverage -ntp | grep  -v "^Running Changeset:"
            fi
            # The piping grep command is a temporary fix to this issue https://github.com/liquibase/liquibase/issues/2396

      # store these twice since non-confidential tests also do a clean install
      - setup_test_results
      - fix_non_compliant_xml_reports
      - store_test_results:
          path: ~/test-results
      - setup_codecov_uploader
      - run:
          name: send coverage for unit tests
          command: ./codecov -F unit-tests_and_non-confidential-tests
      - run:
          name: run the non-confidential integration tests
          command: |
            if [ $CIRCLE_NODE_TOTAL != 1 ] 
            then
              touch /tmp/non-confidential-tests-to-run.txt
              cat temp/test-lists/IT/all.txt | circleci tests run --command="> /tmp/non-confidential-tests-to-run.txt xargs echo" --verbose --split-by=timings --time-default=0.1s
            
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -Pnon-confidential-tests,coverage \
              -Dtest=`cat /tmp/non-confidential-tests-to-run.txt | tr ' ' ','` -DfailIfNoTests=false -ntp | grep  -v "^Running Changeset:"         
            else 
              ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -Pnon-confidential-tests,coverage \
              -ntp | grep  -v "^Running Changeset:"      
            fi
            # The piping grep command is a temporary fix to this issue https://github.com/liquibase/liquibase/issues/2396
      - setup_codecov_uploader
      - run:
          name: send coverage for non-confidential integration tests
          command: ./codecov -F unit-tests_and_non-confidential-tests
      - run:
          name: check that JPA classes are consistent with migrations
          command: |
            scripts/check_migrations.sh
          environment:
            TESTING_PROFILE: automated-review
      - run:
          name: Run git-secrets scan on dockstore repository
          # Needs to be after a build so that the correct configuration is set
          # by the exec-maven plugin
          command: |
            git secrets --scan
      - run:
          name: clean the cache
          command: |
            rm -rf ~/.m2/repository/io/dockstore
            rm -rf ~/.m2/repository/.cache/download-maven-plugin directory
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: dockstore-m2-{{ checksum "THIRD-PARTY-LICENSES.txt" }}-{{ checksum "THIRD-PARTY-LICENSES.dev.txt" }}
      - save_cache:
          # should include non-confidential, but they should probably be split out anyway
          key: dockstore-web-cache-unit-test-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
          paths:
            - /tmp/dockstore-web-cache
      - setup_test_results
      - fix_non_compliant_xml_reports
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results
      - store_artifacts:
          path: keysmap.list
      - persist_coverage
      - run:
          name: Move cache miss log
          command: |
            mkdir misses
            touch /tmp/dockstore-web-cache.misses.log
            cp /tmp/dockstore-web-cache.misses.log misses/dockstore-web-cache.misses-${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.log
      - persist_to_workspace:
          root: .
          paths:
            - misses

  sonar-cloud:
    docker: # run the steps with Docker
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-m2-{{ checksum "THIRD-PARTY-LICENSES.txt" }}-{{ checksum "THIRD-PARTY-LICENSES.dev.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-m2-
      - run:
          name: build
          command: ./mvnw clean install -DskipTests
      - run:
          name: SonarCloud scan - coverage
          command: ./mvnw -Dsonar.coverage.jacoco.xmlReportPaths=../coverage/* sonar:sonar
      - store_artifacts:
          path: misses

commands:
  install-postgres:
    steps:
      - run:
          name: Install postgresql client
          command: |
            sudo rm -rf /var/lib/apt/lists/*
            sudo apt update
            sudo apt install -y postgresql-client
  install-git-secrets:
    steps:
      - run:
          name: Install git-secrets
          command: |
            wget --no-verbose -O git-secrets-1.3.0.tar.gz https://github.com/awslabs/git-secrets/archive/1.3.0.tar.gz
            tar -zxf git-secrets-1.3.0.tar.gz
            cd git-secrets-1.3.0
            sudo make install

  install-pip-machine:
    steps:
      - run:
          name: install pip
          command: |
            sudo apt update
            # https://askubuntu.com/questions/1367139/apt-get-upgrade-auto-restart-services
            sudo NEEDRESTART_MODE=a apt install libxml2-dev libxslt-dev
            
            # For debug purposes, a python3 version was installed in the image, pip is untagged
            python3 --version
            pip3 --version
            alias pip=pip3            

  install-pip:
    steps:
      - run:
          name: install pip
          command: |
            sudo apt update
            sudo apt install python3-distutils python3-dev python3-pip
            # For debug purposes, a python3 version was installed in the image, pip is untagged
            python3 --version
            pip3 --version
            alias pip=pip3
  setup_postgres:
    steps:
      - run:
          name: setup postgres
          command: |
            sudo apt update
            sudo apt install -y curl gpg gnupg2 lsb-release
            curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg
            echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | sudo tee  /etc/apt/sources.list.d/pgdg.list
            sudo apt update
            sudo apt install -y postgresql-client-16
            psql -c "create user dockstore with password 'dockstore' createdb;" -U postgres
            psql -c 'create database webservice_test with owner = dockstore;' -U postgres
  setup_postgres_docker:
    steps:
      - run:
          name: setup postgres
          command: |
            docker exec -it -u postgres postgres1 psql -c "create user dockstore with password 'dockstore' createdb;"
            docker exec -it -u postgres postgres1 psql -c "create database webservice_test with owner = dockstore;"
  setup_machine:
    steps:
      - attach_workspace:
          at: .
      - run: # Useful for verifying default versions on machine image
          name: Java/Maven/Python versions
          command: |
            java -version
            ./mvnw -v
            python3 -V
      - run:
          name: Docker-Compose
          command: docker compose up -d
  setup_test:
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific licenses file checksum
            # when this file is changed, this key will fail
            - dockstore-m2-{{ checksum "THIRD-PARTY-LICENSES.txt" }}-{{ checksum "THIRD-PARTY-LICENSES.dev.txt" }}
            # Find the most recent cache used from any branch
            - dockstore-m2-
      - run:
          name: split up tests and create a file for cache checksum
          command: |
            touch /tmp/tests-to-run.txt
            if [ $CIRCLE_NODE_TOTAL != 1 ]
            then
              cat temp/test-lists/IT/all.txt | circleci tests run --command="> /tmp/tests-to-run.txt xargs echo" --verbose --split-by=timings --time-default=0.1s
            else
              cat temp/test-lists/IT/all.txt | circleci tests run --command="> /tmp/tests-to-run.txt xargs echo" --verbose
            fi
      - restore_cache:
          keys:
            - dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
            - dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-
            - dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-
            - dockstore-web-cache-
  setup_integration_test:
    parameters:
      use_hoverfly_cert:
        type: boolean
        default: false
    steps:
      - run:
          name: decrypt and expand confidential test data
          command: |
            sudo apt install openssl -y
            bash scripts/decrypt.sh
      - install-git-secrets
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for ES
          command: |
            wget --output-document /dev/null --waitretry=5 --tries=10 --retry-connrefused localhost:9200 || true
      - run: # Useful for verifying default versions on machine image
          name: Java/Maven/Python versions
          command: |
            java -version
            ./mvnw -v
            python3 -V
      - when:
          condition: <<parameters.use_hoverfly_cert>>
          steps:
            - run:
                name: run integration test with hoverfly cert
                command: |                  
                  # Adding all "normal" certs into this local one that has the Hoverfly cert (instead of adding Hoverfly cert to the global one so it doesn't potentially affect other tests)
                  /usr/local/jdk-<< pipeline.parameters.java-tag >>/bin/keytool -importkeystore -srckeystore $JAVA_HOME/lib/security/cacerts -destkeystore LocalTrustStore -srcstorepass changeit -deststorepass changeit
                  
                  if [ $CIRCLE_NODE_TOTAL != 1 ] 
                  then
                    ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate -P$TESTING_PROFILE,coverage -ntp \
                    clean verify -Dit.test=`cat /tmp/tests-to-run.txt | tr ' ' ','` -DfailIfNoTests=false -Djavax.net.ssl.trustStore=../LocalTrustStore \
                    -Djavax.net.ssl.trustStorePassword=changeit | grep  -v "^Running Changeset:"
                  else
                    ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -P$TESTING_PROFILE,coverage -ntp -Djavax.net.ssl.trustStore=../LocalTrustStore \
                    -Djavax.net.ssl.trustStorePassword=changeit | grep  -v "^Running Changeset:"
                  fi
      - when:
          condition:
            not: <<parameters.use_hoverfly_cert>>
          steps:
            - run:
                name: run integration test
                command: |  # Runs normally if it is not being run in parallel
                  export DOCKSTORE_CACHE_MIGRATIONS=true
                  
                  if [ $CIRCLE_NODE_TOTAL != 1 ] 
                  then
                    ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate -P$TESTING_PROFILE,coverage -ntp \
                    clean verify -Dit.test=`cat /tmp/tests-to-run.txt | tr ' ' ','` -DfailIfNoTests=false | grep  -v "^Running Changeset:"
                  else 
                    ./mvnw -B org.jacoco:jacoco-maven-plugin:report org.jacoco:jacoco-maven-plugin:report-aggregate clean install -P$TESTING_PROFILE,coverage -ntp | grep  -v "^Running Changeset:"
                  fi
                # The piping grep command is a temporary fix to this issue https://github.com/liquibase/liquibase/issues/2396
      - setup_codecov_uploader
      - run:
          name: send coverage
          command: ./codecov -F ${TESTING_PROFILE//-}
      - persist_coverage
      - run:
          name: Show used dumps
          command: |
            touch /tmp/used_dumps.txt
            cat /tmp/used_dumps.txt

  save_test_results:
    steps:
      - save_cache:
          key:  dockstore-web-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/tests-to-run.txt" }}-{{ .Branch }}
          paths:
            - /tmp/dockstore-web-cache
            - /tmp/dockstore-bitbucket-token-cache
      - setup_test_results
      - fix_non_compliant_xml_reports
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: /tmp/dockstore-web-cache.misses.log
      - run:
          name: Move cache miss log
          command: |
            mkdir misses
            touch /tmp/dockstore-web-cache.misses.log
            cp /tmp/dockstore-web-cache.misses.log misses/dockstore-web-cache.misses-${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.log
      - persist_to_workspace:
          root: .
          paths:
            - misses
  persist_coverage:
    steps:
      - run:
          name: Rename and move coverage reports
          command: |
            mkdir coverage
            cp ./reports/target/site/jacoco-aggregate/jacoco.xml coverage/${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.xml
      - persist_to_workspace:
          root: .
          paths:
            - coverage
  setup_codecov_uploader:
    steps:
      - run:
          name: setup codecov uploader
          command: |
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
  setup_test_results:
    steps:
      - run:
          name: Setup test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/.*-reports/TEST-.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
  fix_non_compliant_xml_reports:
    steps:
      - run:
          name: Fix formatting of test results
          # Sometimes xml reports will have a 'rerunFailure' tag along with the 'failure' tag which CircleCI can't parse
          # The additional element is removed so results can be uploaded properly
          # See https://support.circleci.com/hc/en-us/articles/16386815548571-Troubleshooting-invalid-testcase-element-error-when-uploading-test-results
          command: |
            sudo apt update
            sudo apt install -y xmlstarlet
            for file in ~/test-results/**/*
            do
              xmlstarlet ed --inplace -d '//testsuite/testcase/rerunFailure' $file
            done
          when: always
